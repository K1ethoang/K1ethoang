name: Generate Data

on:
  schedule: # execute every 6 hours
    - cron: "0 */6 * * *"
  workflow_dispatch:

jobs:
  summary-card:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: GitHub-Profile-Summary-Cards
        uses: vn7n24fzkq/github-profile-summary-cards@v0.4.0-hotfix.3
        env:
          GITHUB_TOKEN: ${{ secrets.GENERATE_DATAS_TOKEN }}
        with:
          USERNAME: ${{ github.repository_owner }}


  snake-animation:
    runs-on: ubuntu-latest
    timeout-minutes: 10 

    steps:
      # generates a snake game from a github user (<github_user_name>) contributions graph, output a svg animation at <svg_out_path>
      - name: generate github-contribution-grid-snake.svg
        uses: Platane/snk/svg-only@v3
        with:
          github_user_name: ${{ github.repository_owner }}
          outputs: |
            dist/github-contribution-grid-snake.svg
            dist/github-contribution-grid-snake-dark.svg?palette=github-dark
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          
      # push the content of <build_dir> to a branch
      # the content will be available at https://raw.githubusercontent.com/<github_user>/<repository>/<target_branch>/<file> , or as github page
      - name: push github-contribution-grid-snake.svg to the output branch
        uses: crazy-max/ghaction-github-pages@v3.1.0
        with:
          target_branch: output
          build_dir: dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  cf-stats:
      runs-on: ubuntu-latest

      steps:
        # Check out repository under $GITHUB_WORKSPACE, so the job can access it
        - uses: actions/checkout@v2

        # Run using Python 3.10 for consistency and aiohttp
        - name: Set up Python 3.10
          uses: actions/setup-python@v2
          with:
            python-version: '3.10'
            architecture: 'x64'

        # Cache dependencies. From:
        # https://github.com/actions/cache/blob/master/examples.md#python---pip
        - uses: actions/cache@v2
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/cf-stats/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-
        # Install dependencies with `pip`
        - name: Install requirements
          run: |
            python3 -m pip install --upgrade pip setuptools wheel
            python3 -m pip install -r requirements.txt
            pip install -e .

        - name: create env file
          run: |
            touch cf-stats/config/.env
            cat cf-stats/config/.env.template > cf-stats/config/.env

        # Generate all statistics images
        - name: Generate images
          run: |
            python3 --version
            python3 cf-stats/app/main.py

        # Commit all changed files to the repository
        - name: Commit to the repo
          run: |
            git config --global user.name "sudiptob2/cf-stats"
            git config --global user.email "cf-stats[bot]@sudiptob2.github.io"
            git add .
            # Force the build to succeed, even if no files were changed
            git commit -m 'Update generated files' || true
            git push
